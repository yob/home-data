#!/usr/bin/env ruby

require 'net/http'
require 'stackdriver_simple'
require 'json'
require 'clamp'
require 'time'

# TODO HARD
# * temperature of hot water tank
# * heating state of the hot water system?

def die(msg)
  $stderr.puts msg
  exit(1)
end

class CollectData

  def execute(google_cloud_project, inverter_ip)
    puts Time.now.iso8601
    inverter_data(inverter_ip).each do |name, value|
      write_gauge(google_cloud_project, name, value)
    end
    meter_data(inverter_ip).each do |name, value|
      write_gauge(google_cloud_project, name, value)
    end
  end

  private

  # This assumes the following two ENV vars are set:
  #
  # * GOOGLE_APPLICATION_CREDENTIALS=<path-to-credentials>
  def write_gauge(google_cloud_project, name, value)
    StackdriverSimple.new(
      google_cloud_project: google_cloud_project
    ).submit_gauge(name, value)
  end

  def inverter_data(inverter_ip)
    response = Net::HTTP.get_response(URI("http://#{inverter_ip}/solar_api/v1/GetPowerFlowRealtimeData.fcgi"))

    if response.code.to_i != 200
      {}
    else
      data = JSON.load(response.body)
      grid_draw_watts = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("P_Grid", 0) || 0
      power_watts = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("P_Load", 0) || 0
      generation_watts = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("P_PV", 0) || 0
      energy_day_wh = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("E_Day", 0) || 0

      {
        grid_draw_watts: grid_draw_watts,
        power_watts: power_watts.abs,
        generation_watts: generation_watts,
        energy_day_watt_hours: energy_day_wh,
      }
    end
  end

  def meter_data(inverter_ip)
    response = Net::HTTP.get_response(URI("http://#{inverter_ip}/solar_api/v1/GetMeterRealtimeData.cgi?Scope=System"))

    if response.code.to_i != 200
      {}
    else
      data = JSON.load(response.body)
      grid_voltage = data.fetch("Body", {}).fetch("Data", {}).fetch("0",{}).fetch("Voltage_AC_Phase_1", 0) || 0

      {
        grid_voltage: grid_voltage,
      }
    end
  end

end

Clamp do
  option "--gcp-project", "<name>", "A GCP project slug", required: true, environment_variable: "GCP_PROJECT"
  option "--inverter-ip", "<ip>", "An IP Address", required: true, environment_variable: "INVERTER_IP"

  subcommand "collect", "send data to honeycomb" do

    def execute
      run_until = Time.now + 280 # nearly 5 mins
      while Time.now < run_until
        CollectData.new.execute(
          gcp_project,
          inverter_ip,
        )
        sleep(30)
      end
    end
  end
end
