#!/usr/bin/env ruby

require 'net/http'
require "google/cloud/monitoring"
require 'json'
require 'clamp'
require 'time'

# TODO HARD
# * temperature of hot water tank
# * heating state of the hot water system?

def die(msg)
  $stderr.puts msg
  exit(1)
end

class SensiboPod

  def initialize(data)
    @data = data
  end

  def name
    @data.fetch("room", {}).fetch("name", "")
  end

  def temperature
    @data.fetch("measurements", {}).fetch("temperature", "")
  end

  def humidity
    @data.fetch("measurements", {}).fetch("humidity", "")
  end

  def measurement_time
    @data.fetch("measurements", {}).fetch("time", {}).fetch("time","")
  end

  def ac_on
    @data.fetch("acState", {}).fetch("on", false)
  end

  def ac_fan_level
    @data.fetch("acState", {}).fetch("fanLevel", "")
  end

  def ac_mode
    @data.fetch("acState", {}).fetch("mode", "")
  end

  def ac_swing
    @data.fetch("acState", {}).fetch("swing", "")
  end

  def namespaced_attributes
    {
      "#{name}.temperature" => temperature,
      "#{name}.humidity_percent" => humidity,
      "#{name}.ac_on" => ac_on ? 1 : 0,
    }
  end
end

class SensiboClient
  def initialize(api_key)
    @api_key = api_key
  end

  def pods
    uri = URI("https://home.sensibo.com/api/v2/users/me/pods?fields=*&apiKey=#{@api_key}")
    response = Net::HTTP.get_response(uri)

    if response.code.to_i != 200
      []
    else
      data = JSON.load(response.body)
      result = data.fetch("result", [])
      result.map { |item| SensiboPod.new(item) }
    end
  end
end

class CollectData

  def execute(inverter_ip, sensibo_api_key)
    inverter_data(inverter_ip).each do |name, value|
      puts name
      write_gauge(name, value)
    end
    sensibo_data(sensibo_api_key).each do |name, value|
      puts name
      write_gauge(name, value)
    end
  end

  private

  # This assumes the following two ENV vars are set:
  #
  # * GOOGLE_CLOUD_PROJECT=<project-slug>
  # * GOOGLE_APPLICATION_CREDENTIALS=<path-to-credentials>
  def write_gauge(name, value)
    # This might have optional arguments for providing the project and credentials?
    client = Google::Cloud::Monitoring::Metric.new
    project_name = Google::Cloud::Monitoring::V3::MetricServiceClient.project_path(ENV.fetch("GOOGLE_CLOUD_PROJECT"))

    series = Google::Monitoring::V3::TimeSeries.new
    metric = Google::Api::Metric.new type: "custom.googleapis.com/#{name}"
    series.metric = metric

    resource = Google::Api::MonitoredResource.new type: "global"
    series.resource = resource

    point = Google::Monitoring::V3::Point.new
    point.value = Google::Monitoring::V3::TypedValue.new double_value: value
    now = Time.now
    end_time = Google::Protobuf::Timestamp.new seconds: now.to_i, nanos: now.usec
    point.interval = Google::Monitoring::V3::TimeInterval.new end_time: end_time
    series.points << point

    client.create_time_series project_name, [series]
  end

  def inverter_data(inverter_ip)
    response = Net::HTTP.get_response(URI("http://#{inverter_ip}/solar_api/v1/GetPowerFlowRealtimeData.fcgi"))

    if response.code.to_i != 200
      {}
    else
      data = JSON.load(response.body)
      grid_draw_watts = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("P_Grid", 0) || 0
      power_watts = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("P_Load", 0) || 0
      generation_watts = data.fetch("Body", {}).fetch("Data", {}).fetch("Site",{}).fetch("P_PV", 0) || 0

      {
        grid_draw_watts: grid_draw_watts,
        power_watts: power_watts.abs,
        generation_watts: generation_watts,
      }
    end
  end

  def sensibo_data(api_key)
    sensibo = SensiboClient.new(api_key)
    sensibo.pods.inject({}) { |accum, pod|
      accum.merge(pod.namespaced_attributes)
    }
  end
end

Clamp do
  option "--inverter-ip", "<ip>", "An IP Address", required: true, environment_variable: "INVERTER_IP"
  option "--sensibo-api-key", "<key>", "API key", required: true, environment_variable: "SENSIBO_API_KEY"

  subcommand "collect", "send data to honeycomb" do

    def execute
      run_until = Time.now + 280 # nearly 5 mins
      while Time.now < run_until
        CollectData.new.execute(
          inverter_ip,
          sensibo_api_key,
        )
        sleep(30)
      end
    end
  end
end
