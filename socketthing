#!/usr/bin/ruby

require 'stackdriver_simple'
require 'json'
require 'clamp'
require 'thread'

Thread::abort_on_exception = true

class CollectBlueWalkerData

  NUM_WORKERS = 3
  MACS = {
    "CC:64:A6:ED:F6:AA" => "study",
    "F2:B0:81:51:8A:E0" => "bed1",
    "FB:DD:03:59:E8:26" => "bed2",
    "EF:81:7D:23:3C:74" => "lounge",
    "C2:69:9E:BE:25:AA" => "kitchen",
    "FD:54:A9:F0:A8:A5" => "outside",
  }

  class QueueItem
    attr_reader :google_cloud_project, :label, :value

    def initialize(google_cloud_project:, label:, value:)
      @google_cloud_project = google_cloud_project
      @label = label
      @value = value
    end
  end

  def initialize
    # intentionally unsized, we will accept unlikey unbounded memory growth to ensure stdin is read quickly
    @queue = Queue.new
    start_worker_threads
  end

  def execute(google_cloud_project)
    STDIN.each_line do |json_data|
      data = safe_json_parse(json_data)
      mac = data.fetch("device", {}).fetch("address", "").upcase
      if MACS.has_key?(mac) && last_processed_over_a_minute_ago?(mac)
        device_alias = MACS.fetch(mac)
        temp = data.fetch("sensors",{}).fetch("temperature", 0)
        humidity = data.fetch("sensors",{}).fetch("humidity", 0)
        pressure = data.fetch("sensors",{}).fetch("pressure", 0)
        voltage = data.fetch("sensors",{}).fetch("voltage", 0)
        txpower = data.fetch("sensors",{}).fetch("txpower", 0)
        STDERR.puts "#{mac} (#{device_alias}) temp: #{temp} humidity: #{humidity} pressure: #{pressure} voltage: #{voltage} txpower: #{txpower}"
        @queue << QueueItem.new(google_cloud_project: google_cloud_project, label: "ruuvi.#{device_alias}.temp", value: temp)
        @queue << QueueItem.new(google_cloud_project: google_cloud_project, label: "ruuvi.#{device_alias}.humidity", value: humidity)
        @queue << QueueItem.new(google_cloud_project: google_cloud_project, label: "ruuvi.#{device_alias}.pressure", value: pressure)
        @queue << QueueItem.new(google_cloud_project: google_cloud_project, label: "ruuvi.#{device_alias}.voltage", value: voltage)
        @queue << QueueItem.new(google_cloud_project: google_cloud_project, label: "ruuvi.#{device_alias}.txpower", value: txpower)
        touch_processed_at(mac)
      else
        STDERR.puts "Skipping data for #{mac} (#{MACS.fetch(mac, "unknown")})"
      end
    end
  ensure
    NUM_WORKERS.times do
      @queue << :END
    end
    @threads.each(&:join)
  end

  private

  def safe_json_parse(line)
    data = JSON.parse(line)
  rescue StandardError => e
    STDERR.puts "error parsing JSON (#{e.inspect}), assuming {} (input: #{line.strip}"
    return Hash.new
  end

  def touch_processed_at(mac)
    @last_processed_at ||= Hash.new
    @last_processed_at[mac] = Time.now
  end

  def last_processed_over_a_minute_ago?(mac)
    @last_processed_at ||= Hash.new
    @last_processed_at[mac].nil? || (Time.now - @last_processed_at[mac]) > 60
  end

  def start_worker_threads
    @threads ||= NUM_WORKERS.times.map do
      Thread.new do
        until (item = @queue.pop) == :END
          #puts "about to publish: #{item.google_cloud_project} #{item.label} #{item.value}"
          write_gauge(item.google_cloud_project, item.label, item.value)
        end
      end
    end
  end

  # This assumes the following two ENV vars are set:
  #
  # * GOOGLE_APPLICATION_CREDENTIALS=<path-to-credentials>
  def write_gauge(google_cloud_project, name, value)
    StackdriverSimple.new(
      google_cloud_project: google_cloud_project
    ).submit_gauge(name, value)
  rescue StandardError => e
    STDERR.puts "Error writing to stackdriver (#{e.inspect}) (#{google_cloud_project}, #{name}, #{value}"
  end
end

Clamp do
  option "--gcp-project", "<name>", "A GCP project slug", required: true, environment_variable: "GCP_PROJECT"

  subcommand "collect", "send data to stackdriver" do

    def execute
      CollectBlueWalkerData.new.execute(
        gcp_project,
      )
    end
  end
end
